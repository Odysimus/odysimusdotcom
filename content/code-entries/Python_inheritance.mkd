title: Simple Python Inheritance
type: code-entry
category: code
date: 2012-02-23
---
Lately, I have been working with Django Class-Based Views (CBVs) which use inheritance heavily. However, they call inheritance "mixing". They build up classes by mixing in other classes and inheriting their properties. I had defined some of my own mixins, and I wondered, which mixin takes precedence? I wrote some simple classes and then performed science.

    ::python
        class A(object):
            x = "I'm from A."

        class B(object):
            x = "I'm from B."

Class W has two mixins, A and B. I mix A first.

    ::python
        class W(A, B):
            """ """
Class Y has two mixins, A and B. This time I mix B first.

    ::python
        class Y(B, A):
            """ """

Classes A and B both inherit from object. What happens if I don't inherit from object?

    ::python
        class A_():
            x = "I'm from A_."

The class U mixes A\_ and B. A does not inherit from object.

    ::python
        class U(A_, B):
            x = "I'm from B."



Below are the tests I ran using Python 3. The results were the same when Python 2.7 was used.

    ::python
        >>> w = W()
        >>> print("Printing class that mixed A first.")
        "Printing class that mixed A first."
        >>> print(w.x)
        "I'm from A."

        >>> y = Y()
        >>> print("Printing class that mixed B first.")
        "Printing class that mixed B first."
        >>> print(y.x)
        "I'm from B."

        >>> u = U()
        >>> print("Printing class that mixed A_ first.")
        "Printing class that mixed A_ first."
        >>> print(u.x)
        "I'm from B."

##Conclusions
Which order you mix classes is important. Precedence is from left to right. If you don't inherit from object, you lose precedence to classes that do.

##Further Questions
Why does it work like this?

